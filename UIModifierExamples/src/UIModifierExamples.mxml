<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	xmlns:dv="http://devigner.net/ns" 
	resize="resize()"
	viewSourceURL="srcview/index.html">
	<mx:Style>
		Application{
			background-image:'';
			background-color:#ffffff;	
		}
	</mx:Style>
	<mx:Script> 
		<![CDATA[
			import dv.events.UIModifierEvent;
			import dv.utils.MathUtils;
			
			
			private function init():void
			{
				var a:int = 5;
				var b:int = 15;
				modifier.visible = true;
				modifier.setTarget( _img );
				modifier.addEventListener( UIModifierEvent.MODIFIED,storeData)
				modifier.debug = false;
				modifier.scaleMode = UIModifier.SCALE_ALL;
				modifier.enableScaling = true
				modifier.enableRotation = true
				modifier.applyModification = true;
				//resize();
			}
			
			private function resize():void
			{
				if ( modifier != null ) {
					modifier.maxBoundries = new Rectangle(0,0,stage.width,stage.height);
				}
			}
			
			private function storeData(event:UIModifierEvent):void
			{
				var data:String = '';
				data += "x: "+event.x+"\n";
				data += "y: "+event.y+"\n";
				data += "width: "+event.width+"\n";
				data += "height: "+event.height+"\n";
				data += "rotation: "+event.rotation+"\n";
				data += "pivot: "+event.pivot+"\n";
				debug.text = data;
				resize()
			}
			
			private function setSelection(event:Event):void
			{
				modifier.visible = true;
				switch(elements.selectedIndex){
					case 0:
						modifier.visible = false;
						break;
					case 1:
						modifier.setTarget( btn );
						break;
					case 2:
						modifier.setTarget( btn2 );
						break;
					case 3:
						modifier.setTarget( stepper );
						break;	
					case 4:
						modifier.setTarget( textarea );
						break;
					case 5:
						modifier.setTarget( _img );
						break;
					case 6:
						modifier.setTarget( centerd, null, true );
						break;
				}
			}
			
			private function setScaleMode(event:Event):void
			{
				switch ( scalemode.selectedIndex ) {
					case 0:
						modifier.scaleMode = UIModifier.SCALE_ALL;
						break
					case 1:
						modifier.scaleMode = UIModifier.SCALE_PROPORTIONAL
						break
					case 2:
						modifier.scaleMode = UIModifier.SCALE_VERTICAL;
						break
					case 3:
						modifier.scaleMode = UIModifier.SCALE_HORIZONTAL;
						break
				}
			}
			
			private function enableScaling():void
			{
				scalemode.enabled = _enableScaling.selected;
				modifier.enableScaling = _enableScaling.selected
			}
			
			private function enableRotation():void
			{
				modifier.enableRotation = _enableRotation.selected
			}
			
			private function enableMoving():void
			{
				modifier.enableMoving = _enableMoving.selected
			}


			protected function button1_clickHandler(event:MouseEvent):void
			{
				modifier.reset();
			}


			protected function _enableMoving_changeHandler(event:Event):void
			{
				//modifier.debug = _showDebug.selected
			}

		]]>
	</mx:Script>
	<mx:Canvas left="5" right="5" bottom="5" top="5">
			
		<mx:VBox width="100%" height="100%">
			
			
			<mx:Tile width="100%" direction="horizontal">
				
				<mx:ComboBox change="setSelection(event)" id="elements">
					<mx:Array>
						<mx:Object>Select a DisplayObject</mx:Object>
						<mx:Object>Button 1</mx:Object>
						<mx:Object>Button 2</mx:Object>
						<mx:Object>Numeric</mx:Object>
						<mx:Object>Textarea</mx:Object>
						<mx:Object>Image</mx:Object>
						<mx:Object>CenterdImage</mx:Object>
					</mx:Array>
				</mx:ComboBox>
				
				<mx:CheckBox label="Enable scaling" selected="true" change="enableScaling()" id="_enableScaling" />
		
				<mx:ComboBox change="setScaleMode(event)" id="scalemode">
					<mx:Array>
						<mx:Object>All</mx:Object>
						<mx:Object>Proportional</mx:Object>
						<mx:Object>Vertical</mx:Object>
						<mx:Object>Horizontal</mx:Object>
					</mx:Array>
				</mx:ComboBox>
				
				<mx:CheckBox label="Enable rotation" selected="true" change="enableRotation()" id="_enableRotation" />
				<mx:CheckBox label="Enable movement" selected="true" change="enableMoving()" id="_enableMoving" />
				<mx:CheckBox label="Show debug" selected="true" change="_enableMoving_changeHandler(event)" id="_showDebug" />
				<mx:Button click="button1_clickHandler(event)" label="Reset"/>
				
			
			</mx:Tile>
			
			<mx:Text>
				<mx:text>
					This is an example of UIModifier, the purpose of this project is to create an universal modifier for Flex. 
				</mx:text>
			</mx:Text>
			
			<mx:Canvas width="100%" height="100%">
				
				<mx:Button id="btn" label="Button" x="343" y="108"/>
				<mx:Button id="btn2" label="Button with a large label" x="210" y="183"/>
				<mx:TextArea x="326" y="227" width="175" height="81" id="textarea"/>
				<mx:TextArea width="200" height="200" id="debug" bottom="10" left="10"/>
				<mx:NumericStepper x="326" y="48" id="stepper"/>
				<mx:Image source="@Embed('assets/buffed_red_medic.jpg')" id="_img" />
				<mx:Canvas width="244" height="244" x="470" y="200" rotation="45" id="centerd" backgroundAlpha=".1" backgroundColor="#00ff00" clipContent="false" >
					<mx:Image source="@Embed('assets/buffed_red_medic.jpg')" width="244" height="244" x="-122" y="-122" />
				</mx:Canvas>
				
				<dv:UIModifier id="modifier" width="171" height="100" x="433" y="10" debug="{_showDebug.selected}" addedToStage="init()" />
			</mx:Canvas>
			
		</mx:VBox>
		
		
	</mx:Canvas>
</mx:Application>